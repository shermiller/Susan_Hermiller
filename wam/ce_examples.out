Script started on Sun 21 May 2017 11:18:43 PM CDT
math-compute-1:~ $ gap

            #########           ######         ###########           ###  
         #############          ######         ############         ####  
        ##############         ########        #############       #####  
       ###############         ########        #####   ######      #####  
      ######         #         #########       #####    #####     ######  
     ######                   ##########       #####    #####    #######  
     #####                    ##### ####       #####   ######   ########  
     ####                    #####  #####      #############   ###  ####  
     #####     #######       ####    ####      ###########    ####  ####  
     #####     #######      #####    #####     ######        ####   ####  
     #####     #######      #####    #####     #####         #############
      #####      #####     ################    #####         #############
      ######     #####     ################    #####         #############
      ################    ##################   #####                ####  
       ###############    #####        #####   #####                ####  
         #############    #####        #####   #####                ####  
          #########      #####          #####  #####                ####  
                                                                          
     Information at:  http://www.gap-system.org
     Try '?help' for help. See also  '?copyright' and  '?authors'
    
   Loading the library. Please be patient, this may take a while.
GAP4, Version: 4.4.12 of 17-Dec-2008, x86_64-unknown-linux-gnu-gcc
Components:  small 2.1, small2 2.0, small3 2.0, small4 1.0, small5 1.0, 
             small6 1.0, small7 1.0, small8 1.0, small9 1.0, small10 0.2, id2 3.0, 
             id3 2.1, id4 1.0, id5 1.0, id6 1.0, id9 1.0, id10 0.1, trans 1.0, 
             prim 2.1  loaded.
Packages:    AClib 1.1, Polycyclic 2.6, Alnuth 2.2.5, AutPGrp 1.3, CrystCat 1.1.3, 
             Cryst 4.1.6, CRISP 1.3.2, CTblLib 1.1.3, TomLib 1.1.4, FactInt 1.5.2, 
             GAPDoc 1.2, FGA 1.1.0.1, IRREDSOL 1.1.2, LAGUNA 3.5.0, Sophus 1.23, 
             Polenta 1.2.7, ResClasses 2.5.3  loaded.
gap> 
gap> # Finding the order of a group, the
gap> #index of a subgroup, and the coset table information:
gap> 
gap> 
gap> F2 := FreeGroup( "a", "b" );
<free group on the generators [ a, b ]>
gap> 
gap> G := F2 / [ F2.1^2, F2.2^2, (F2.1*F2.2)^2 ];
<fp group on the generators [ a, b ]>
gap> IsFinite(G);
true
gap> Size(G);
4
gap> a := G.1;; b := G.2;;
gap> 
gap> H := Subgroup( G, [ a*b ] );
Group([ a*b ])
gap> Index( G, H );
2
gap> tabh := CosetTable(G, H);;
gap> PrintArray( TransposedMat( tabh ) );
[ [  2,  2,  2,  2 ],
  [  1,  1,  1,  1 ] ]
gap> 
gap> J  := Subgroup( F2, [ F2.1, F2.2*F2.1*F2.2^-1, 
>   F2.2^-1*F2.1*F2.2, F2.2^2 ] );;
gap> Index( F2, J );
2
gap> tabj := CosetTable(F2, J);
[ [ 1, 2 ], [ 1, 2 ], [ 2, 1 ], [ 2, 1 ] ]
gap> PrintArray( TransposedMat( tabj ) );
[ [  1,  1,  2,  2 ],
  [  2,  2,  1,  1 ] ]
gap> 
gap> K := Subgroup( F2, [ (F2.1*F2.2)^2, (F2.1^-1*F2.2)^2 ] );;
gap> Index( F2, K );
infinity
gap> tabk := CosetTable(F2, K);
Error, the coset enumeration has defined more than 256000 cosets
 called from
TCENUM.CosetTableFromGensAndRels( fgens, grels, fsgens ) called from
CosetTableFromGensAndRels( fgens, grels, fsgens ) called from
TryCosetTableInWholeGroup( H ) called from
CosetTableInWholeGroup( H ) called from
<function>( <arguments> ) called from read-eval-loop
Entering break read-eval-print loop ...
type 'return;' if you want to continue with a new limit of 512000 cosets,
type 'quit;' if you want to quit the coset enumeration,
type 'maxlimit := 0; return;' in order to continue without a limit
brk> 
brk> quit;
#I  Options stack has been reset
gap> 
gap> 
gap> #------------------------
gap> # PSL_2(Z)
gap> 
gap> F2 := FreeGroup( "a", "b" );
<free group on the generators [ a, b ]>
gap> 
gap> G := F2 / [ F2.1^2, F2.2^3 ];
<fp group on the generators [ a, b ]>
gap> a := G.1;; b := G.2;;
gap> 
gap> H := Subgroup( G, [ b*a*b*a^-1*b, b^-1*a*b*a^-1 ] );
Group([ b*a*b*a^-1*b, b^-1*a*b*a^-1 ])
gap> Index( G, H );
6
gap> tabh := CosetTable(G, H);;
gap> PrintArray( TransposedMat( tabh ) );
[ [  2,  2,  3,  4 ],
  [  1,  1,  5,  6 ],
  [  5,  5,  4,  1 ],
  [  6,  6,  1,  3 ],
  [  3,  3,  6,  2 ],
  [  4,  4,  2,  5 ] ]
gap> 
gap> 
gap> p := PresentationSubgroup( G, H, "G" );
<presentation with 2 gens and 0 rels of total length 0>
gap> gens := GeneratorsOfPresentation( p );
[ G1, G2 ]
gap> TzPrintRelators( p );
#I  there are no relators
gap> 
gap> #----------------------------
gap> #Groups generated by reflections 
gap> 
gap> 
gap> F3 := FreeGroup( "a", "b", "c" );
<free group on the generators [ a, b, c ]>
gap> C := F3 / [ F3.1^2, F3.2^2, F3.3^2, (F3.1*F3.2)^3, 
>     (F3.1*F3.3)^3, (F3.2*F3.3)^3 ];
<fp group on the generators [ a, b, c ]>
gap> ### IsFinite(C);
gap> a := C.1;; b := C.2;; c:= C.3;;
gap> 
gap> N := Subgroup( C, [ a*b*a*c, a*c*a*b ] );
Group([ a*b*a*c, a*c*a*b ])
gap> Index( C, N );
6
gap> tabn := CosetTable(C, N);;
gap> PrintArray( TransposedMat( tabn ) );
[ [  2,  2,  3,  3,  4,  4 ],
  [  1,  1,  5,  5,  6,  6 ],
  [  6,  6,  1,  1,  5,  5 ],
  [  5,  5,  6,  6,  1,  1 ],
  [  4,  4,  2,  2,  3,  3 ],
  [  3,  3,  4,  4,  2,  2 ] ]
gap> 
gap> 
gap> 
gap> F3 := FreeGroup( "a", "b", "c" );
<free group on the generators [ a, b, c ]>
gap> D := F3 / [ F3.1^2, F3.2^2, F3.3^2, (F3.1*F3.2)^8, 
>     (F3.1*F3.3)^8, (F3.2*F3.3)^8 ];
<fp group on the generators [ a, b, c ]>
gap> a := D.1;; b := D.2;; c:= D.3;;
gap> 
gap> M := Subgroup( D, [ a, b, c*a*c, c*b*c ] );
Group([ a, b, c*a*c, c*b*c ])
gap> Index( D, M );
2
gap> tabn := CosetTable(D, M);;
gap> PrintArray( TransposedMat( tabn ) );
[ [  1,  1,  1,  1,  2,  2 ],
  [  2,  2,  2,  2,  1,  1 ] ]
gap> 
gap> 
gap> #---------------------------------------------------
gap> 
gap> # Stallings graph
gap> 
gap> LoadPackage("ACE");
---------------------------------------------------------------------------
Loading    ACE (Advanced Coset Enumerator) 5.0
GAP code by Greg Gamble <gregg@itee.uq.edu.au> (address for correspondence)
       Alexander Hulpke (http://www.math.colostate.edu/~hulpke)
           [uses ACE binary (C code program) version: 3.001]
C code by  George Havas (http://www.itee.uq.edu.au/~havas)
           Colin Ramsay (http://www.itee.uq.edu.au/~cram)

                 For help, type: ?ACE
---------------------------------------------------------------------------
true
gap> G := FreeGroup(2);
<free group on the generators [ f1, f2 ]>
gap> ACECosetTableFromGensAndRels([G.1,G.2],[],[G.1^3,G.2^3]:purer,incomplete);
#I  ACECosetTable: Coset table is incomplete, reduced & lenlex standardised.
[ [ 2, 3, 1, 0, 0 ], [ 3, 1, 2, 0, 0 ], [ 4, 0, 0, 5, 1 ], [ 5, 0, 0, 1, 4 ] ]
gap> Display(TransposedMat(last));
[ [  2,  3,  4,  5 ],
  [  3,  1,  0,  0 ],
  [  1,  2,  0,  0 ],
  [  0,  0,  5,  1 ],
  [  0,  0,  1,  4 ] ]
gap> quit;
math-compute-1:~ $ exit
exit

Script done on Sun 21 May 2017 11:19:08 PM CDT
